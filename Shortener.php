<?php
/**
 * Shortener is used to shorten URLs for convenience and tracking purposes.
 * It saves the full url and a corresponding short url into a database which is then used
 * to redirect users to the full url from the short url automatically.
 *
 * All code is open source and unlicensed - feel free to use as you see fit :-)
 */
class Shortener {

    //holds the database object
    private $db;

    //holds the data generated by the user
    private $data = [];

    /**
     * This function is called every time that the Shortener class is instantiated, so we don't need to worry about connecting to the database manually
     */
    public function __construct() {
        $this->db = new PDO('mysql:host=workspace;dbname=shortener', 'root', 'mypassword');
    }

    /**
     * Generates a unique code to use as the shorturl if a user-specified shorturl isn't provided
     * @return string
     */
    public function generateCode() {
        $query = $this->db->prepare("SELECT COUNT(*) as COUNT FROM links;");
        $query->execute();

        $count = $query->fetchAll(PDO::FETCH_NUM);
        return base_convert($count[0][0] * 6200000, 10, 36);
    }

    /**
     * Adds a url and shorturl pair into the database.  Also sets the response details as session variables
     * @param string $url
     * @param string $shorturl
     */
    public function addLink($url, $shorturl) {
        $query = $this->db->prepare("INSERT INTO links (url, shorturl, created) VALUES (:url, :shorturl, :created)");

        $query->bindValue(":url", $url);
        $query->bindValue(":shorturl", $shorturl);
        $query->bindValue(":created", time());

        session_start();

        if (!$query->execute()) {
            $_SESSION['state'] = 'error';
            $_SESSION['response'] = '<strong>ERROR</strong>: Could not assign ' . $shorturl . ' to ' . $url . '.';
        } else {
            $_SESSION['state'] = 'errorfree';
            $_SESSION['response'] = getenv('HTTP_HOST') . '/' . getenv('PATH_INFO') . filter_input(INPUT_POST, 'shorturl');
        }
    }

    /**
     * Returns the corresponding url for the provided shorturl
     * @param string $shorturl
     * @return string
     */
    public function resolveShortUrl($shorturl) {
        if (is_null($shorturl)) {
            return;
        }
        $query = $this->db->prepare("SELECT url FROM links WHERE shorturl=:shorturl");
        $query->bindValue("shorturl", $shorturl);

        $query->execute();
        $result = $query->fetchAll(PDO::FETCH_NUM);
        return $result[0][0];
    }

    /**
     * Stores user data into the $this->data property, which will later be used to store the data into the database
     */
    public function getUserData() {
        $this->data['SHORTURL'] = filter_input(INPUT_GET, 'shorturl');
        $this->data['REQUEST_TIME'] = time();
        $this->data['REMOTE_ADDR'] = getenv('REMOTE_ADDR');
        $this->data['SERVER_PROTOCOL'] = getenv('SERVER_PROTOCOL');
        $this->data['HTTPS'] = getenv('HTTPS');
        $this->data['HTTP_USER_AGENT'] = getenv('HTTP_USER_AGENT');
        $this->data['HTTP_REFERER'] = getenv('HTTP_REFERER');
    }

    /**
     * Stores the data stored in $this->data into the associated mysql database in the track table
     */
    public function storeData() {
        $attributes = implode(', ', array_keys($this->data));
        $values = ':' . implode(', :', array_keys($this->data));

        $query = $this->db->prepare("INSERT INTO track ($attributes) VALUES ($values)");

        foreach ($this->data as $k => $v) {
            $query->bindValue(":$k", $v);
        }

        if (!$query->execute()) {
            echo 'This URL was not found';
        }
    }

}
